call plug#begin('~/.vim/plugged')

" Navigation
  Plug 'christoomey/vim-tmux-navigator'
  " Complementary pairs of mappings with ][
  Plug 'tpope/vim-unimpaired'
  " Nicer file navigator
  Plug 'justinmk/vim-dirvish'
  " Vim sugar for the UNIX shell commands e.g. Rename, Delete
  Plug 'tpope/vim-eunuch'
	" highlights which characters to target for f, F and family
  Plug 'unblevable/quick-scope'

" Editing
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'mbbill/undotree'
  Plug 'machakann/vim-highlightedyank'
  " Align characters with ga
  Plug 'junegunn/vim-easy-align'
	" Register preview
  Plug 'junegunn/vim-peekaboo'

" Appearance
  Plug 'itchyny/lightline.vim'
  Plug 'drewtempelmeyer/palenight.vim'

" Search
  Plug 'nelstrom/vim-visual-star-search'
  Plug 'stefandtw/quickfix-reflector.vim'
  " dependencies
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'
  " telescope
  Plug 'nvim-telescope/telescope.nvim'

" Utility
  Plug 'tpope/vim-fugitive'

" Languages
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
  Plug 'neovim/nvim-lspconfig'
  Plug 'hrsh7th/nvim-compe'
  Plug 'mfussenegger/nvim-lint'

  Plug 'lervag/vimtex'

call plug#end()

" System
  set mouse=a " Enable mouse
  set clipboard^=unnamed " Use system clipboard
  set undofile
  set directory=$HOME/.vim/swapfiles//
  set shortmess+=filmnrxcoOtT " Abbrev. of messages (avoids 'hit enter')

  map <Space> <Leader>
  " Keyboard mash to escape
  imap jk <Esc>
  imap kj <Esc>
  " vimrc shortcuts
  nnoremap <Leader>ev :edit ~/.config/nvim/init.vim <enter>
  nnoremap <Leader>sv :source ~/.config/nvim/init.vim <enter>
  " Disable seldom used commands
  nnoremap Q <nop>
  " Paste on new line
  nnoremap <Leader>p :put <enter>
  nnoremap <Leader>P :put! <enter>

  " More convenient mappings for standard commands
  nnoremap H ^
  nnoremap Q @@

  " Delete without clobbering unnamed register
  nnoremap s "_d

  " Join without space
  nmap <Leader>j Jx
 
  "replace the word under cursor
  nnoremap <Leader>* :%s/\<<c-r><c-w>\>//g<left><left>

  " Fix common command typos
  if has("user_commands")
    command! -bang -nargs=? -complete=file E e<bang> <args>
    command! -bang -nargs=? -complete=file W w<bang> <args>
    command! -bang -nargs=? -complete=file Wq wq<bang> <args>
    command! -bang -nargs=? -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
  endif


" Editing
  " set backspace= " Prevent backspace past start of edit
  set scrolloff=10 " Keep 10 lines in view
  set nojoinspaces " Prevent double space joining on punctuation
  abbr @@ hello@grahambates.com

" Completion
  set wildmode=longest,list,full " Better command completion
  set wildignore+=*.png,*.PNG,*.JPG,*.jpg,*.JPEG,*.jpeg,*.GIF,*.gif,*.pdf,*.PDF " Binary files
  set wildignore+=.git,vendor,node_modules,reports,.idea " Project and vendor dirs
  set completeopt=menuone,noselect

  let g:compe = {}
  let g:compe.enabled = v:true
  let g:compe.autocomplete = v:true
  let g:compe.debug = v:false
  let g:compe.min_length = 1
  let g:compe.preselect = 'enable'
  let g:compe.throttle_time = 80
  let g:compe.source_timeout = 200
  let g:compe.resolve_timeout = 800
  let g:compe.incomplete_delay = 400
  let g:compe.max_abbr_width = 100
  let g:compe.max_kind_width = 100
  let g:compe.max_menu_width = 100
  let g:compe.documentation = v:true

  let g:compe.source = {}
  let g:compe.source.path = v:true
  let g:compe.source.buffer = v:true
  let g:compe.source.calc = v:true
  let g:compe.source.nvim_lsp = v:true
  let g:compe.source.nvim_lua = v:true
  let g:compe.source.vsnip = v:true
  let g:compe.source.ultisnips = v:true
  let g:compe.source.luasnip = v:true
  let g:compe.source.emoji = v:true

  inoremap <silent><expr> <C-Space> compe#complete()
  inoremap <silent><expr> <CR>      compe#confirm('<CR>')
  inoremap <silent><expr> <C-e>     compe#close('<C-e>')
  inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
  inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

" Make
  set autowrite " Save before :make
  nnoremap <Leader>m :make % <enter>

" Appearance
  set textwidth=120 colorcolumn=+1 " Highlight maximum line length
  set cursorline " Highlight line with cursor
  set number relativenumber " Show relative line numbers
  set showcmd " Show the command being typed
  set noshowmode " Shown through statusline

  " Change cursor shape between insert and normal mode in iTerm3.app
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif

  " Use 24-bit (true-color) mode
  if (has("termguicolors"))
    set termguicolors
  endif

  let g:one_allow_italics=1
  let g:palenight_terminal_italics=1
  colorscheme palenight

" File navigation
  nnoremap <Leader>e :Dirvish <enter>
  nnoremap <Leader>E :Explore <enter>
  let g:netrw_liststyle=3
  set path=.,**

" Formatting
  set expandtab
  set tabstop=2
  set softtabstop=2
  set shiftwidth=2
  autocmd FileType php setlocal ts=4 sts=4 sw=4 et " PHP specific settings

" Search
  set ignorecase smartcase " Case insensitive search - Unless begins with uppercase
  set gdefault " use global flag by default in s: commands
  set hlsearch " Highlight search
  set inccommand=nosplit " Substitute preview
  " Always keep search results in the center.
  map N Nzz
  map n nzz
  " Clear search highlight and redraw
  nnoremap <Leader>c :nohls <enter> :redraw! <enter>
  " Replace grep program
  if executable("rg")
    set grepprg=rg\ --hidden\ --glob\ '!.git'\ --vimgrep\ --with-filename
    set grepformat=%f:%l:%c:%m
  endif

" Buffers
  set hidden " Hide unsaved buffers
  set confirm " Ask about unsaved changes
  nnoremap <Leader>w :w <enter>
  nnoremap <Leader>q :bd <enter>
  nnoremap <Leader>Q :qall <enter>

" Windows/splits
  set splitbelow " Default split directions
  set splitright
  autocmd FileType help wincmd L " Open help on right

" Spelling
  if has("spell")
    nnoremap <Leader>? :set spell!<CR>
    set complete+=kspell
    " Default on for file types
    autocmd BufRead,BufNewFile *.md setlocal spell
    autocmd FileType gitcommit setlocal spell
  endif
  set dictionary=/usr/share/dict/words

" Folding
  set foldmethod=syntax
  set foldlevel=99
  set foldcolumn=1

" Terminal
	" ctrl-n for normal mode
	" Need esc key for zsh vim mode
  tnoremap <C-n> <C-\><C-n>
	" <C-r>{register} to paste register in terminal
  tnoremap <expr> <C-R> '<C-\><C-N>"'.nr2char(getchar()).'pi'
	" Window movements
  tnoremap <C-h> <C-\><C-N><C-w>h
  tnoremap <C-j> <C-\><C-N><C-w>j
  tnoremap <C-k> <C-\><C-N><C-w>k
  tnoremap <C-l> <C-\><C-N><C-w>l
	" Always start in insert mode
  autocmd TermOpen * startinsert
  autocmd BufWinEnter,WinEnter term://* startinsert
  autocmd BufLeave term://* stopinsert
	" https://github.com/neovim/neovim/issues/9483
  tmap <LeftRelease> <Nop>
	" No line numbers in terminal
  autocmd TermOpen * setlocal nonumber norelativenumber

" Plugins {{{

  " Telescope  
    nnoremap <Leader><TAB> <cmd>Telescope buffers<cr>
    nnoremap <Leader><CR> <cmd>Telescope find_files<cr>
    nnoremap <Leader>/ <cmd>Telescope live_grep<cr>
    nnoremap <leader>fh <cmd>Telescope help_tags<cr>

  " nvim-lspconfig
lua << EOF
-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

local nvim_lsp = require('lspconfig')

nvim_lsp.tsserver.setup{
  -- disable formatting to use diagnosticls instead
  on_attach = function(client)
    client.resolved_capabilities.document_formatting = false
    on_attach(client)
  end,
  flags = {
    debounce_text_changes = 150,
  }
}

nvim_lsp.gopls.setup{
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  }
}

nvim_lsp.intelephense.setup{
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  }
}

nvim_lsp.diagnosticls.setup{
  filetypes={'javascript','typescript'},
  init_options = {
    linters = {
      eslint = {
        command = 'eslint_d',
        rootPatterns = {'.git'},
        debounce = 100,
        args = {
          '--stdin',
          '--stdin-filename',
          '%filepath',
          '--format',
          'json'
        },
        sourceName = 'eslint',
        parseJson = {
          errorsRoot = '[0].messages',
          line = 'line',
          column = 'column',
          endLine = 'endLine',
          endColumn = 'endColumn',
          message = '${message} [${ruleId}]',
          security = 'severity'
        },
        securities = {
          [2] = 'error',
          [1] = 'warning',
        },
      },
    },
    filetypes = {
      javascript = 'eslint',
      typescript = 'eslint'
    },
    formatters = {
      prettier = {
        command = "prettier",
        args = {"--stdin-filepath" ,"%filepath"}
      },
      eslint = {
        command = "eslint_d",
        args = {
          '--fix-to-stdout',
          '--stdin',
          '--stdin-filename',
          '%filepath',
        },
      }
    },
    formatFiletypes = {
      javascript = "eslint",
      typescript = "eslint"
    },
  }
}
EOF

  " Format on save
    au BufWritePre *.js,*.jsx,*.ts,*.tsx lua vim.lsp.buf.formatting()

  " Fugitive
    nnoremap <Leader>gs :Gstatus<CR>
    nnoremap <Leader>gc :Gcommit<CR>
    nnoremap <Leader>gd :Gdiff<CR>
    nnoremap <Leader>gb :Gblame<CR>
    nnoremap <Leader>gf :Gfetch<CR>

  " Undo tree
    nmap <Leader>u :UndotreeToggle<CR>

  " Quick Scope
    let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

  " Highlight Yank
    let g:highlightedyank_highlight_duration = 250

  " Disable cursor keys
    inoremap <Left>  <NOP>
    inoremap <Right> <NOP>
    inoremap <Up>    <NOP>
    inoremap <Down>  <NOP>
    nnoremap <Left>  <NOP>
    nnoremap <Right> <NOP>
    nnoremap <Up>    <NOP>
    nnoremap <Down>  <NOP>

  " Python
    let python_highlight_all = 1
    let g:python_host_prog = '/usr/local/bin/python2'
    let g:python3_host_prog = '/usr/local/bin/python3'

    let g:lightline = {
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'cocstatus': 'coc#status',
        \   'currentfunction': 'CocCurrentFunction'
        \ },
        \ }

  " Vimtext
    let g:tex_flavor = 'latex'

" }}}
